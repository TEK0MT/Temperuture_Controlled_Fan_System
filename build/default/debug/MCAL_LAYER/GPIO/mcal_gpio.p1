Version 4.0 HI-TECH Software Intermediate Code
"1325 C:/Program Files/Microchip/MPLABX/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\../../../xc8/pic/include/proc/pic16f877a.h
[v _TRISA `Vuc ~T0 @X0 0 e@133 ]
"1375
[v _TRISB `Vuc ~T0 @X0 0 e@134 ]
"1437
[v _TRISC `Vuc ~T0 @X0 0 e@135 ]
"1499
[v _TRISD `Vuc ~T0 @X0 0 e@136 ]
"1561
[v _TRISE `Vuc ~T0 @X0 0 e@137 ]
"166
[v _PORTA `Vuc ~T0 @X0 0 e@5 ]
"216
[v _PORTB `Vuc ~T0 @X0 0 e@6 ]
"278
[v _PORTC `Vuc ~T0 @X0 0 e@7 ]
"340
[v _PORTD `Vuc ~T0 @X0 0 e@8 ]
"402
[v _PORTE `Vuc ~T0 @X0 0 e@9 ]
"61 MCAL_LAYER/GPIO/mcal_gpio.h
[; ;MCAL_LAYER/GPIO/mcal_gpio.h: 61: typedef struct{
[s S101 :3 `uc 1 :3 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S101 . port pin logic direction ]
"27 MCAL_LAYER/GPIO/mcal_gpio.c
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 27:         }
[c E1356 0 1 .. ]
[n E1356 . GPIO_DIRECTION_OUTPUT GPIO_DIRECTION_INPUT  ]
"41
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 41: uint8 gpio_pin_write_logic(const pin_config_t *pin,logic_t logic){
[c E1352 0 1 .. ]
[n E1352 . GPIO_LOW GPIO_HIGH  ]
"95
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 95: uint8 gpio_port_direction_initialize(const port_t port,direction_t direction){
[c E1345 0 1 2 3 4 .. ]
[n E1345 . PORTA_INDEX PORTB_INDEX PORTC_INDEX PORTD_INDEX PORTE_INDEX  ]
"54 C:/Program Files/Microchip/MPLABX/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\../../../xc8/pic/include/proc/pic16f877a.h
[; <" INDF equ 00h ;# ">
"61
[; <" TMR0 equ 01h ;# ">
"68
[; <" PCL equ 02h ;# ">
"75
[; <" STATUS equ 03h ;# ">
"161
[; <" FSR equ 04h ;# ">
"168
[; <" PORTA equ 05h ;# ">
"218
[; <" PORTB equ 06h ;# ">
"280
[; <" PORTC equ 07h ;# ">
"342
[; <" PORTD equ 08h ;# ">
"404
[; <" PORTE equ 09h ;# ">
"436
[; <" PCLATH equ 0Ah ;# ">
"456
[; <" INTCON equ 0Bh ;# ">
"534
[; <" PIR1 equ 0Ch ;# ">
"596
[; <" PIR2 equ 0Dh ;# ">
"636
[; <" TMR1 equ 0Eh ;# ">
"643
[; <" TMR1L equ 0Eh ;# ">
"650
[; <" TMR1H equ 0Fh ;# ">
"657
[; <" T1CON equ 010h ;# ">
"732
[; <" TMR2 equ 011h ;# ">
"739
[; <" T2CON equ 012h ;# ">
"810
[; <" SSPBUF equ 013h ;# ">
"817
[; <" SSPCON equ 014h ;# ">
"887
[; <" CCPR1 equ 015h ;# ">
"894
[; <" CCPR1L equ 015h ;# ">
"901
[; <" CCPR1H equ 016h ;# ">
"908
[; <" CCP1CON equ 017h ;# ">
"966
[; <" RCSTA equ 018h ;# ">
"1061
[; <" TXREG equ 019h ;# ">
"1068
[; <" RCREG equ 01Ah ;# ">
"1075
[; <" CCPR2 equ 01Bh ;# ">
"1082
[; <" CCPR2L equ 01Bh ;# ">
"1089
[; <" CCPR2H equ 01Ch ;# ">
"1096
[; <" CCP2CON equ 01Dh ;# ">
"1154
[; <" ADRESH equ 01Eh ;# ">
"1161
[; <" ADCON0 equ 01Fh ;# ">
"1257
[; <" OPTION_REG equ 081h ;# ">
"1327
[; <" TRISA equ 085h ;# ">
"1377
[; <" TRISB equ 086h ;# ">
"1439
[; <" TRISC equ 087h ;# ">
"1501
[; <" TRISD equ 088h ;# ">
"1563
[; <" TRISE equ 089h ;# ">
"1620
[; <" PIE1 equ 08Ch ;# ">
"1682
[; <" PIE2 equ 08Dh ;# ">
"1722
[; <" PCON equ 08Eh ;# ">
"1756
[; <" SSPCON2 equ 091h ;# ">
"1818
[; <" PR2 equ 092h ;# ">
"1825
[; <" SSPADD equ 093h ;# ">
"1832
[; <" SSPSTAT equ 094h ;# ">
"2001
[; <" TXSTA equ 098h ;# ">
"2082
[; <" SPBRG equ 099h ;# ">
"2089
[; <" CMCON equ 09Ch ;# ">
"2159
[; <" CVRCON equ 09Dh ;# ">
"2224
[; <" ADRESL equ 09Eh ;# ">
"2231
[; <" ADCON1 equ 09Fh ;# ">
"2290
[; <" EEDATA equ 010Ch ;# ">
"2297
[; <" EEADR equ 010Dh ;# ">
"2304
[; <" EEDATH equ 010Eh ;# ">
"2311
[; <" EEADRH equ 010Fh ;# ">
"2318
[; <" EECON1 equ 018Ch ;# ">
"2363
[; <" EECON2 equ 018Dh ;# ">
"8 MCAL_LAYER/GPIO/mcal_gpio.c
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 8: volatile uint8 *tris_registers[] = {&TRISA,&TRISB,&TRISC,&TRISD,&TRISE};
[v _tris_registers `*Vuc ~T0 @X0 -> 5 `i e ]
[i _tris_registers
:U ..
&U _TRISA
&U _TRISB
&U _TRISC
&U _TRISD
&U _TRISE
..
]
"10
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 10: volatile uint8 *port_registers[] = {&PORTA,&PORTB,&PORTC,&PORTD,&PORTE};
[v _port_registers `*Vuc ~T0 @X0 -> 5 `i e ]
[i _port_registers
:U ..
&U _PORTA
&U _PORTB
&U _PORTC
&U _PORTD
&U _PORTE
..
]
"14
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 14: uint8 gpio_pin_direction_initialize(const pin_config_t *pin){
[v _gpio_pin_direction_initialize `(uc ~T0 @X0 1 ef1`*CS101 ]
{
[e :U _gpio_pin_direction_initialize ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[f ]
"15
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 15:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"16
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 16:     if(pin == ((void*)0)){
[e $ ! == _pin -> -> -> 0 `i `*v `*CS101 103  ]
{
"17
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 17:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"18
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 18:     }
}
[e $U 104  ]
"19
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 19:     else{
[e :U 103 ]
{
"20
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 20:         switch(pin->direction){
[e $U 106  ]
{
"21
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 21:             case GPIO_DIRECTION_OUTPUT:
[e :U 107 ]
"22
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 22:                 (*tris_registers[pin->port] &= ~(0x01 << pin->pin));
[e =& *U *U + &U _tris_registers * -> . *U _pin 0 `ux -> -> # *U &U _tris_registers `ui `ux -> ~ << -> 1 `i -> . *U _pin 1 `i `uc ]
"23
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 23:                 break;
[e $U 105  ]
"24
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 24:             case GPIO_DIRECTION_INPUT:
[e :U 108 ]
"25
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 25:                 (*tris_registers[pin->port] |= (0x01 << pin->pin));
[e =| *U *U + &U _tris_registers * -> . *U _pin 0 `ux -> -> # *U &U _tris_registers `ui `ux -> << -> 1 `i -> . *U _pin 1 `i `uc ]
"26
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 26:                 break;
[e $U 105  ]
"27
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 27:         }
}
[e $U 105  ]
[e :U 106 ]
[e [\ . *U _pin 3 , $ . `E1356 0 107
 , $ . `E1356 1 108
 105 ]
[e :U 105 ]
"28
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 28:     }
}
[e :U 104 ]
"29
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 29:     return ret;
[e ) _ret ]
[e $UE 102  ]
"30
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 30: }
[e :UE 102 ]
}
"31
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 31: uint8 gpio_get_pin_direction(const pin_config_t *pin,direction_t *direction){
[v _gpio_get_pin_direction `(uc ~T0 @X0 1 ef2`*CS101`*E1356 ]
{
[e :U _gpio_get_pin_direction ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[v _direction `*E1356 ~T0 @X0 1 r2 ]
[f ]
"32
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 32:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"33
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 33:     if(pin == ((void*)0) || direction == ((void*)0)){
[e $ ! || == _pin -> -> -> 0 `i `*v `*CS101 == _direction -> -> -> 0 `i `*v `*E1356 110  ]
{
"34
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 34:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"35
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 35:     }
}
[e $U 111  ]
"36
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 36:     else{
[e :U 110 ]
{
"37
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 37:         *direction = ((*tris_registers[pin->port] >> pin->pin) & 0x01);
[e = *U _direction -> & >> -> *U *U + &U _tris_registers * -> . *U _pin 0 `ux -> -> # *U &U _tris_registers `ui `ux `i -> . *U _pin 1 `i -> 1 `i `E1356 ]
"38
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 38:     }
}
[e :U 111 ]
"39
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 39:     return ret;
[e ) _ret ]
[e $UE 109  ]
"40
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 40: }
[e :UE 109 ]
}
"41
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 41: uint8 gpio_pin_write_logic(const pin_config_t *pin,logic_t logic){
[v _gpio_pin_write_logic `(uc ~T0 @X0 1 ef2`*CS101`E1352 ]
{
[e :U _gpio_pin_write_logic ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[v _logic `E1352 ~T0 @X0 1 r2 ]
[f ]
"42
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 42:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"43
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 43:     if(pin == ((void*)0)){
[e $ ! == _pin -> -> -> 0 `i `*v `*CS101 113  ]
{
"44
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 44:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"45
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 45:     }
}
[e $U 114  ]
"46
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 46:     else{
[e :U 113 ]
{
"47
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 47:         switch(logic){
[e $U 116  ]
{
"48
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 48:             case GPIO_HIGH:
[e :U 117 ]
"49
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 49:                 (*port_registers[pin->port] |= (0x01 << pin->pin));
[e =| *U *U + &U _port_registers * -> . *U _pin 0 `ux -> -> # *U &U _port_registers `ui `ux -> << -> 1 `i -> . *U _pin 1 `i `uc ]
"50
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 50:                 break;
[e $U 115  ]
"51
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 51:             case GPIO_LOW:
[e :U 118 ]
"52
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 52:                 (*port_registers[pin->port] &= ~(0x01 << pin->pin));
[e =& *U *U + &U _port_registers * -> . *U _pin 0 `ux -> -> # *U &U _port_registers `ui `ux -> ~ << -> 1 `i -> . *U _pin 1 `i `uc ]
"53
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 53:                 break;
[e $U 115  ]
"54
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 54:         }
}
[e $U 115  ]
[e :U 116 ]
[e [\ -> _logic `ui , $ -> . `E1352 1 `ui 117
 , $ -> . `E1352 0 `ui 118
 115 ]
[e :U 115 ]
"55
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 55:     }
}
[e :U 114 ]
"56
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 56:     return ret;
[e ) _ret ]
[e $UE 112  ]
"57
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 57: }
[e :UE 112 ]
}
"58
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 58: uint8 gpio_pin_read_logic(const pin_config_t *pin,logic_t *logic){
[v _gpio_pin_read_logic `(uc ~T0 @X0 1 ef2`*CS101`*E1352 ]
{
[e :U _gpio_pin_read_logic ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[v _logic `*E1352 ~T0 @X0 1 r2 ]
[f ]
"59
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 59:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"60
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 60:     if(pin == ((void*)0) || logic == ((void*)0)){
[e $ ! || == _pin -> -> -> 0 `i `*v `*CS101 == _logic -> -> -> 0 `i `*v `*E1352 120  ]
{
"61
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 61:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"62
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 62:     }
}
[e $U 121  ]
"63
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 63:     else{
[e :U 120 ]
{
"64
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 64:         *logic = ((*port_registers[pin->port] >> pin->pin) & 0x01);
[e = *U _logic -> & >> -> *U *U + &U _port_registers * -> . *U _pin 0 `ux -> -> # *U &U _port_registers `ui `ux `i -> . *U _pin 1 `i -> 1 `i `E1352 ]
"65
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 65:     }
}
[e :U 121 ]
"66
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 66:     return ret;
[e ) _ret ]
[e $UE 119  ]
"67
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 67: }
[e :UE 119 ]
}
"68
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 68: uint8 gpio_pin_toggle_logic(const pin_config_t *pin){
[v _gpio_pin_toggle_logic `(uc ~T0 @X0 1 ef1`*CS101 ]
{
[e :U _gpio_pin_toggle_logic ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[f ]
"69
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 69:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"70
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 70:     if(pin == ((void*)0)){
[e $ ! == _pin -> -> -> 0 `i `*v `*CS101 123  ]
{
"71
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 71:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"72
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 72:     }
}
[e $U 124  ]
"73
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 73:     else{
[e :U 123 ]
{
"74
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 74:         (*port_registers[pin->port] ^= (0x01 << pin->pin));
[e =^ *U *U + &U _port_registers * -> . *U _pin 0 `ux -> -> # *U &U _port_registers `ui `ux -> << -> 1 `i -> . *U _pin 1 `i `uc ]
"75
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 75:     }
}
[e :U 124 ]
"76
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 76:     return ret;
[e ) _ret ]
[e $UE 122  ]
"77
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 77: }
[e :UE 122 ]
}
"78
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 78: uint8 gpio_pin_initialize(const pin_config_t *pin){
[v _gpio_pin_initialize `(uc ~T0 @X0 1 ef1`*CS101 ]
{
[e :U _gpio_pin_initialize ]
[v _pin `*CS101 ~T0 @X0 1 r1 ]
[f ]
"79
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 79:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"80
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 80:     if(pin == ((void*)0)){
[e $ ! == _pin -> -> -> 0 `i `*v `*CS101 126  ]
{
"81
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 81:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"82
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 82:     }
}
[e $U 127  ]
"83
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 83:     else{
[e :U 126 ]
{
"84
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 84:         gpio_pin_direction_initialize(pin);
[e ( _gpio_pin_direction_initialize (1 _pin ]
"85
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 85:         gpio_pin_write_logic(pin,pin->logic);
[e ( _gpio_pin_write_logic (2 , _pin -> . *U _pin 2 `E1352 ]
"86
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 86:     }
}
[e :U 127 ]
"87
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 87:     return ret;
[e ) _ret ]
[e $UE 125  ]
"88
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 88: }
[e :UE 125 ]
}
"95
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 95: uint8 gpio_port_direction_initialize(const port_t port,direction_t direction){
[v _gpio_port_direction_initialize `(uc ~T0 @X0 1 ef2`CE1345`E1356 ]
{
[e :U _gpio_port_direction_initialize ]
[v _port `CE1345 ~T0 @X0 1 r1 ]
[v _direction `E1356 ~T0 @X0 1 r2 ]
[f ]
"96
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 96:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"97
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 97:     if(port > 5 -1){
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 129  ]
{
"98
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 98:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"99
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 99:     }
}
[e $U 130  ]
"100
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 100:     else{
[e :U 129 ]
{
"101
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 101:         switch(direction){
[e $U 132  ]
{
"102
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 102:             case GPIO_DIRECTION_INPUT :
[e :U 133 ]
"103
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 103:                 *tris_registers[port] = 0xFF;
[e = *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux -> -> 255 `i `uc ]
"104
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 104:                 break;
[e $U 131  ]
"105
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 105:             case GPIO_DIRECTION_OUTPUT :
[e :U 134 ]
"106
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 106:                 *tris_registers[port] = 0x00;
[e = *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux -> -> 0 `i `uc ]
"107
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 107:                 break;
[e $U 131  ]
"108
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 108:             default:
[e :U 135 ]
"109
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 109:                 *tris_registers[port] = direction;
[e = *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux -> _direction `uc ]
"110
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 110:         }
}
[e $U 131  ]
[e :U 132 ]
[e [\ -> _direction `ui , $ -> . `E1356 1 `ui 133
 , $ -> . `E1356 0 `ui 134
 135 ]
[e :U 131 ]
"112
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 112:     }
}
[e :U 130 ]
"113
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 113:     return ret;
[e ) _ret ]
[e $UE 128  ]
"114
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 114: }
[e :UE 128 ]
}
"115
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 115: uint8 gpio_get_port_direction(const port_t port,direction_t *direction){
[v _gpio_get_port_direction `(uc ~T0 @X0 1 ef2`CE1345`*E1356 ]
{
[e :U _gpio_get_port_direction ]
[v _port `CE1345 ~T0 @X0 1 r1 ]
[v _direction `*E1356 ~T0 @X0 1 r2 ]
[f ]
"116
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 116:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"117
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 117:     if(port > 5 -1){
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 137  ]
{
"118
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 118:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"119
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 119:     }
}
[e $U 138  ]
"120
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 120:     else{
[e :U 137 ]
{
"121
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 121:         *direction = *tris_registers[port];
[e = *U _direction -> *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux `E1356 ]
"122
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 122:     }
}
[e :U 138 ]
"123
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 123:     return ret;
[e ) _ret ]
[e $UE 136  ]
"124
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 124: }
[e :UE 136 ]
}
"125
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 125: uint8 gpio_port_write_logic(const port_t port,logic_t logic){
[v _gpio_port_write_logic `(uc ~T0 @X0 1 ef2`CE1345`E1352 ]
{
[e :U _gpio_port_write_logic ]
[v _port `CE1345 ~T0 @X0 1 r1 ]
[v _logic `E1352 ~T0 @X0 1 r2 ]
[f ]
"126
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 126:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"127
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 127:     if(port > 5 -1){
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 140  ]
{
"128
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 128:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"129
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 129:     }
}
[e $U 141  ]
"130
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 130:     else{
[e :U 140 ]
{
"131
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 131:         switch(logic){
[e $U 143  ]
{
"132
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 132:             case GPIO_HIGH :
[e :U 144 ]
"133
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 133:                 *port_registers[port] = 0xFF;
[e = *U *U + &U _port_registers * -> _port `ux -> -> # *U &U _port_registers `ui `ux -> -> 255 `i `uc ]
"134
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 134:                 break;
[e $U 142  ]
"135
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 135:             case GPIO_LOW :
[e :U 145 ]
"136
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 136:                 *port_registers[port] = 0x00;
[e = *U *U + &U _port_registers * -> _port `ux -> -> # *U &U _port_registers `ui `ux -> -> 0 `i `uc ]
"137
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 137:                 break;
[e $U 142  ]
"138
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 138:                 default:
[e :U 146 ]
"139
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 139:                 *port_registers[port] = logic;
[e = *U *U + &U _port_registers * -> _port `ux -> -> # *U &U _port_registers `ui `ux -> _logic `uc ]
"140
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 140:         }
}
[e $U 142  ]
[e :U 143 ]
[e [\ -> _logic `ui , $ -> . `E1352 1 `ui 144
 , $ -> . `E1352 0 `ui 145
 146 ]
[e :U 142 ]
"142
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 142:     }
}
[e :U 141 ]
"143
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 143:     return ret;
[e ) _ret ]
[e $UE 139  ]
"144
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 144: }
[e :UE 139 ]
}
"145
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 145: uint8 gpio_port_read_logic(const port_t port,logic_t *logic){
[v _gpio_port_read_logic `(uc ~T0 @X0 1 ef2`CE1345`*E1352 ]
{
[e :U _gpio_port_read_logic ]
[v _port `CE1345 ~T0 @X0 1 r1 ]
[v _logic `*E1352 ~T0 @X0 1 r2 ]
[f ]
"146
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 146:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"147
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 147:     if(port > 5 -1){
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 148  ]
{
"148
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 148:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"149
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 149:     }
}
[e $U 149  ]
"150
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 150:     else{
[e :U 148 ]
{
"151
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 151:         *logic = *port_registers[port];
[e = *U _logic -> *U *U + &U _port_registers * -> _port `ux -> -> # *U &U _port_registers `ui `ux `E1352 ]
"152
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 152:     }
}
[e :U 149 ]
"153
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 153:     return ret;
[e ) _ret ]
[e $UE 147  ]
"154
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 154: }
[e :UE 147 ]
}
"155
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 155: uint8 gpio_port_toggle_logic(const port_t port){
[v _gpio_port_toggle_logic `(uc ~T0 @X0 1 ef1`CE1345 ]
{
[e :U _gpio_port_toggle_logic ]
[v _port `CE1345 ~T0 @X0 1 r1 ]
[f ]
"156
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 156:     uint8 ret = 0x00;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 0 `i `uc ]
"157
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 157:     if(port > 5 -1){
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 151  ]
{
"158
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 158:         ret = 0x01;
[e = _ret -> -> 1 `i `uc ]
"159
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 159:     }
}
[e $U 152  ]
"160
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 160:     else{
[e :U 151 ]
{
"161
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 161:         *port_registers[port] ^= 0xFF;
[e =^ *U *U + &U _port_registers * -> _port `ux -> -> # *U &U _port_registers `ui `ux -> -> 255 `i `uc ]
"162
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 162:     }
}
[e :U 152 ]
"163
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 163:     return ret;
[e ) _ret ]
[e $UE 150  ]
"164
[; ;MCAL_LAYER/GPIO/mcal_gpio.c: 164: }
[e :UE 150 ]
}
